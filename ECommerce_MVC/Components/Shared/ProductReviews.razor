@inject ApplicationDbContext Context
@using Microsoft.EntityFrameworkCore
@using System.Text.Json;
@using System.Text;
@using global::Models;
@if (islogged & !reviewexists)
{
    <div>
        <EditForm Model="ReviewModel" OnValidSubmit="PostReview">
            <ValidationSummary />
            <DataAnnotationsValidator />
            <RadzenRating Stars="5" @bind-Value="ReviewModel.Score" />
            <textarea class="form-control mb-1" rows="3" @bind="ReviewModel.Reviewtext" />
            <button class="btn btn-primary" type="submit">Post Review</button>
        </EditForm>
    </div>
}

<div class="mt-3 ">
    @foreach (var review in Reviews)
    {
        <div class="border rounded p-3 mx-1 my-2">
            <RadzenRating ReadOnly="true" Value="@review.Score" Stars="5" />
            <p>by <span class="font-weight-bold">@review.Reviewer.FullName</span></p>
            <hr />
            <p class="mb-0">@review.Reviewtext</p>
        </div>
    }
    <nav class="mt-2" aria-label="...">
        <ul class="pagination">
            <li class="page-item disabled">
                <button @onclick="()=> { GetReviews(RevPage - 1);}" disabled="@(RevPage<=1)" class="btn btn-secondary">Previous</button>
            </li>
            <li class="page-item p-2 mx-2">@RevPage</li>
            <li class="page-item">
                <button class="btn btn-secondary" @onclick="()=> { GetReviews(RevPage + 1);}" disabled="@(Reviews.Count()<11)">Next</button>
            </li>
        </ul>
    </nav>
</div>


@code {
    [Parameter]
    public Guid ProductId { get; set; }
    [Parameter]
    public string UserId { get; set; }
    [Parameter]
    public bool islogged { get; set; }

    public bool reviewexists { get; set; }

    public Review ReviewModel { get; set; } = new();

    public int RevPage { get; set; } = 1;
    public List<Review> Reviews { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (islogged)
        {
            reviewexists = Context.Reviews.Where(r => r.ReviewerID == UserId && r.ProductId == ProductId).Count() > 0;
        }
        await GetReviews(RevPage);
    }

    public Task GetReviews(int page)
    {
        Reviews = Context.Reviews.OrderByDescending(r => r.DatePosted).Include(r => r.Reviewer).Where(r => r.ProductId == ProductId).Skip(10 * (page - 1)).Take(11).ToList();
        return Task.CompletedTask;
    }

    private async Task PostReview()
    {
        if (ReviewModel.Score >= 1)
        {
            ReviewModel.DatePosted = DateTime.Now;
            ReviewModel.ProductId = ProductId;
            ReviewModel.ReviewerID = UserId;

            await Context.Reviews.AddAsync(ReviewModel);

            var product = await Context.Products.FindAsync(ProductId);
            product.rating = (product.rating * product.ratingnum + ReviewModel.Score) / (product.ratingnum + 1);
            product.ratingnum++;

            await Context.SaveChangesAsync();


            await sendReview(ReviewModel.Reviewtext);


            await OnInitializedAsync();
        }
    }

    private async Task sendReview(string review)
    {
        string url = "https://staging.pivotpointbms.com/api/im/Analysis/Review";

        using (HttpClient client = new HttpClient())
        {
            try
            {
                var content = new StringContent(JsonSerializer.Serialize(new { key = Constants.Key, reviewText = review }), Encoding.UTF8, "application/json");
                HttpResponseMessage response = await client.PostAsync(url, content);

                // Handle the response
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Success");
                }
                else
                {
                    Console.WriteLine($"Failed to post the review. Status code: {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred while posting the review: {ex.Message}");
            }
        }
    }
}

