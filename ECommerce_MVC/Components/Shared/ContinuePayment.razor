@using global::Models;
@inject ApplicationDbContext context
@inject IFileManager filemanager
@inject NavigationManager navman

@if (Id != Guid.Empty)
{
    <EditForm Model="Model" OnValidSubmit="OnValidSubmit">
        <div class="my-3 p-3 bg-white">
            <h2>Change Payment Details</h2>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Payment Method</label>
                <div class="col-sm-10">
                    <InputSelect @bind-Value="@Model.PaymentMethod" class="form-control">
                        @foreach (var item in Enum.GetValues(typeof(PaymentMethod)))
                            {
                            <option value="@item">@item</option>
                            }
                    </InputSelect>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Payment Method</label>
                <div class="col-sm-10">
                    <InputFile OnChange="@OnInputFileChange" class="form-control" />
                </div>
            </div>
            <img class="w-50" src="@ImageDataURL" />
        </div>
        <button class="btn btn-primary" type="submit">Save Payment Details</button>
    </EditForm>
}

@code {
    [Parameter]
    public Guid Id { get; set; }
    [Parameter]
    public Guid OrderId { get; set; }

    public BuyerDetails Model { get; set; } = new();
    public IBrowserFile ImageFile { get; set; }
    public string ImageDataURL { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id != Guid.Empty)
            Model = await context.Buyers.FindAsync(Id);
    }

    private async Task OnValidSubmit()
    {
        try
        {
            if (!string.IsNullOrEmpty(Model.PaymentEvidenceImg))
                filemanager.DeleteFile(Model.PaymentEvidenceImg);

            if (ImageFile != null)
                Model.PaymentEvidenceImg = await filemanager.UploadImage(ImageFile);
        }
        catch { }
        var order = await context.Orders.FindAsync(OrderId);
        order.State = DeliveryState.ForCheckUp;
        context.Update(Model);
        await context.SaveChangesAsync();
        navman.NavigateTo("/OrderDetails/" + OrderId, true);
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        ImageFile = e.GetMultipleFiles().FirstOrDefault();
        var resized = await ImageFile.RequestImageFileAsync(format,
            500, 500);
        var buffer = new byte[resized.Size];
        await resized.OpenReadStream().ReadAsync(buffer);
        ImageDataURL = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
    }
}
