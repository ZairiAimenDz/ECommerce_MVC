@using global::Models;
@inject ApplicationDbContext _context
@inject NavigationManager NavMan

<div class="row border-bottom py-2">
    <div class="col-sm-3">
        <p>@Name</p>
        <p class="mb-0">@Phone</p>
    </div>
    <div class="col-sm-2">
        @Total @Constants.Currency
    </div>
    <div class="col-sm-3">
        <a class="btn btn-outline-info" href="@("/OrderDetails/"+OrderId)">@OrderId</a>
    </div>
    <div class="col-sm-4">
        @if (isfinished)
        {
            @if (!suredelete)
            {
                <p class="mb-0">Finished</p>
                <button @onclick="() => { suredelete = true; }" class="btn btn-outline-danger">Remove</button>
            }
            else
            {
                <p class="mb-0">Are You Sure ?</p>
                <button @onclick="()=> { suredelete = false; }" class="btn btn-outline-secondary">Cancel</button>
                <button @onclick="DeleteOrder" class="btn btn-outline-danger">Remove</button>
            }
        }
        else
        {
            <select @bind="@State" @onselectionchange="Valuechanged" class="form-control">
                @foreach (var item in Enum.GetValues(typeof(DeliveryState)))
                {
                    <option value="@item">@item</option>
                }
            </select>
            <button @onclick="Valuechanged" class="btn btn-outline-info">Save Changes</button>
        }

    </div>
</div>

@code {
    [Parameter]
    public Guid OrderId { get; set; }
    [Parameter]
    public Guid BuyerId { get; set; }
    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public string Phone { get; set; }
    [Parameter]
    public double Total { get; set; }
    [Parameter]
    public DeliveryState State { get; set; }

    public bool isfinished { get; set; }
    public bool suredelete { get; set; }

    protected override Task OnInitializedAsync()
    {
        isfinished = State == DeliveryState.isFinished;
        return base.OnInitializedAsync();
    }

    public async Task Valuechanged()
    {
        var order = await _context.Orders.FindAsync(OrderId);
        order.State = State;
        await _context.SaveChangesAsync();
        if (State == DeliveryState.isFinished)
        {
            isfinished = true;
            foreach (var item in _context.OrderedProducts.Where(o=>o.OrderId == OrderId).ToList())
            {
                var product = await _context.Products.FindAsync(item.ProductId);
                product.NumberInStock--;
            }
            await _context.SaveChangesAsync();
        }
    }

    public async Task DeleteOrder()
    {
        var item = await _context.Orders.FindAsync(OrderId);
        var buyer = await _context.Buyers.FindAsync(BuyerId);
        if(item != null)
            _context.Remove(item);
        if(buyer != null)
            _context.Remove(buyer);
        await _context.SaveChangesAsync();
        NavMan.NavigateTo("/Admin/Orders", true);
    }
}
